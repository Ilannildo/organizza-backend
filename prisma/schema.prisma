generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  uid                   String                @id @default(uuid())
  name                  String                @db.VarChar(150)
  email                 String                @unique(map: "email")
  gender                String?               @db.VarChar(15)
  phone                 String?               @db.VarChar(32)
  password              String
  photo_url             String?
  name_badge            String?               @db.VarChar(150)
  status                Boolean               @default(false)
  email_verificated_at  DateTime?
  role_id               String
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  deleted_at            DateTime?
  role                  Role                  @relation(fields: [role_id], references: [id])
  user_has_address      UserHasAddress?
  email_token           EmailToken?
  events                Event[]
  subscriptions         Subscription[]
  session_subscriptions SessionSubscription[]
  service_orders        ServiceOrder[]
  recipient             Recipient?
  logs                  Log[]

  @@map("users")
}

model Recipient {
  id                    String                @id @default(uuid())
  user_id               String                @unique
  external_recipient_id String
  document              String
  document_type         RecipientDocumentType
  status                RecipientStatus
  account_registered_at DateTime?
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  deleted_at            DateTime?
  user                  User                  @relation(fields: [user_id], references: [uid])

  @@map("recipients")
}

model Role {
  id                     String   @id @default(uuid())
  name                   String   @db.VarChar(150)
  register_user          Boolean  @default(false)
  delete_user            Boolean  @default(false)
  edit_user              Boolean  @default(false)
  view_user              Boolean  @default(false)
  register_event         Boolean  @default(false)
  delete_event           Boolean  @default(false)
  edit_event             Boolean  @default(false)
  view_event             Boolean  @default(false)
  register_ticket        Boolean  @default(false)
  delete_ticket          Boolean  @default(false)
  edit_ticket            Boolean  @default(false)
  view_ticket            Boolean  @default(false)
  register_session       Boolean  @default(false)
  delete_session         Boolean  @default(false)
  edit_session           Boolean  @default(false)
  view_session           Boolean  @default(false)
  register_service_order Boolean  @default(false)
  delete_service_order   Boolean  @default(false)
  edit_service_order     Boolean  @default(false)
  view_service_order     Boolean  @default(false)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  users                  User[]

  @@map("roles")
}

model EmailToken {
  id            String    @id @default(uuid())
  expires_in    Int
  user_id       String    @unique
  email_sent    Boolean   @default(false)
  email_sent_at DateTime?
  user          User      @relation(fields: [user_id], references: [uid])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("email_tokens")
}

model State {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(150)
  uf         String   @db.VarChar(2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cities     City[]

  @@map("states")
}

model City {
  id                 String    @id @default(uuid())
  name               String    @db.VarChar(150)
  zipcode            String    @db.VarChar(8)
  state_id           String
  is_available_event Boolean   @default(true)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  state              State     @relation(fields: [state_id], references: [id])
  addresses          Address[]

  @@map("cities")
}

model Address {
  id                String           @id @default(uuid())
  street            String           @db.VarChar(150)
  reference         String?          @db.VarChar(150)
  neighborhood      String?          @db.VarChar(150)
  city_id           String
  latitude          String?
  longitude         String?
  address_link      String?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  city              City             @relation(fields: [city_id], references: [id])
  user_has_address  UserHasAddress?
  event_has_address EventHasAddress?

  @@map("addresses")
}

model UserHasAddress {
  user_id    String  @unique
  address_id String  @unique
  address    Address @relation(fields: [address_id], references: [id])
  user       User    @relation(fields: [user_id], references: [uid])

  @@id([user_id, address_id])
  @@map("users_has_addresses")
}

model Event {
  id                   String           @id @default(uuid())
  title                String
  slug                 String
  created_by_user_id   String
  event_type_id        String
  credit_hour          Int?
  main_subject_id      String
  short_description    String
  summary              String?
  venue_type           EventVenueType
  is_private           Boolean
  start_date           DateTime
  end_date             DateTime
  logo_url             String?
  facebook_url         String?
  instagram_url        String?
  twitter_url          String?
  event_responsible_id String
  status               EventStatus
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  deleted_at           DateTime?
  created_by_user      User             @relation(fields: [created_by_user_id], references: [uid])
  event_responsible    EventResponsible @relation(fields: [event_responsible_id], references: [id])
  main_subject         MainSubject      @relation(fields: [main_subject_id], references: [id])
  event_type           EventType        @relation(fields: [event_type_id], references: [id])
  event_cover          EventCover?
  event_has_address    EventHasAddress?
  sessions             Session[]
  tickets              Ticket[]
  subscriptions        Subscription[]

  @@map("events")
}

model EventHasAddress {
  event_id   String  @unique
  address_id String  @unique
  address    Address @relation(fields: [address_id], references: [id])
  event      Event   @relation(fields: [event_id], references: [id])

  @@id([event_id, address_id])
  @@map("events_has_addresses")
}

model EventCover {
  id       String  @id @default(uuid())
  event_id String  @unique
  name     String
  size     Int
  key      String
  url      String?
  event    Event   @relation(fields: [event_id], references: [id])

  @@map("event_covers")
}

model EventResponsible {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  description String?
  phone       String?
  logo_url    String?
  document    String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  events      Event[]

  @@map("event_responsibles")
}

model EventType {
  id         String    @id @default(uuid())
  title      String
  icon_name  String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  events     Event[]

  @@map("event_types")
}

model Ticket {
  id                    String               @id @default(uuid())
  category_title        String
  include_fee           Boolean
  event_id              String
  ticket_price_type_id  String
  participant_limit     Int
  description           String?
  value                 Float
  sold                  Int?
  start_date            DateTime
  due_date              DateTime
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt
  event                 Event                @relation(fields: [event_id], references: [id])
  ticket_price_type     TicketPriceType      @relation(fields: [ticket_price_type_id], references: [id])
  ticket_service_orders TicketServiceOrder[]

  @@map("tickets")
}

model MainSubject {
  id         String    @id @default(uuid())
  title      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  events     Event[]

  @@map("main_subjects")
}

model Session {
  id                    String                @id @default(uuid())
  title                 String
  code_ref              String?
  credit_hour           Int?
  summary               String
  responsible_name      String?
  event_id              String
  session_type_id       String
  place                 String
  status                EventStatus
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  deleted_at            DateTime?
  event                 Event                 @relation(fields: [event_id], references: [id])
  session_cover         SessionCover?
  session_type          SessionType           @relation(fields: [session_type_id], references: [id])
  session_tickets       SessionTicket?
  session_subscriptions SessionSubscription[]
  session_dates         SessionDates[]

  @@map("sessions")
}

model SessionDates {
  id         String            @id @default(uuid())
  date       DateTime
  type       SessionDateType
  position   Int
  status     SessionDateStatus
  session_id String
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  deleted_at DateTime?
  session    Session           @relation(fields: [session_id], references: [id])

  @@map("session_dates")
}

model SessionCover {
  id         String  @id @default(uuid())
  session_id String  @unique
  name       String
  size       Int
  key        String
  url        String?
  session    Session @relation(fields: [session_id], references: [id])

  @@map("session_covers")
}

model SessionType {
  id         String    @id @default(uuid())
  title      String
  icon_name  String?
  is_menu    Boolean   @default(false)
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  sessions   Session[]

  @@map("session_types")
}

model SessionTicket {
  id                            String                      @id @default(uuid())
  session_id                    String                      @unique
  ticket_price_type_id          String
  participant_limit             Int
  value                         Float
  created_at                    DateTime                    @default(now())
  updated_at                    DateTime                    @updatedAt
  session                       Session                     @relation(fields: [session_id], references: [id])
  ticket_price_type             TicketPriceType             @relation(fields: [ticket_price_type_id], references: [id])
  session_ticket_service_orders SessionTicketServiceOrder[]

  @@map("session_tickets")
}

model TicketPriceType {
  id              String          @id @default(uuid())
  title           String
  quote_id        String
  is_free         Boolean
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  quote           Quote           @relation(fields: [quote_id], references: [id])
  tickets         Ticket[]
  session_tickets SessionTicket[]

  @@map("ticket_price_types")
}

model Quote {
  id                 String            @id @default(uuid())
  name               String
  percentage         Float
  min_value          Float
  min_base_value     Float
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  ticket_price_types TicketPriceType[]

  @@map("quotes")
}

model ServiceOrder {
  id                           String                     @id @default(uuid())
  user_id                      String
  amount_total                 Float
  status                       ServiceOrderStatus         @default(open)
  reason_canceled              String?
  type                         ServiceOrderType
  expires_in                   Int
  paid_at                      DateTime?
  created_at                   DateTime                   @default(now())
  updated_at                   DateTime                   @default(now()) @updatedAt
  ticket_service_order         TicketServiceOrder?
  session_ticket_service_order SessionTicketServiceOrder?
  transactions                 Transaction[]
  user                         User                       @relation(fields: [user_id], references: [uid])

  @@map("service_orders")
}

model TicketServiceOrder {
  id               String        @id @default(uuid())
  service_order_id String        @unique
  ticket_id        String
  service_order    ServiceOrder  @relation(fields: [service_order_id], references: [id])
  ticket           Ticket        @relation(fields: [ticket_id], references: [id])
  subscription     Subscription?

  @@map("ticket_service_orders")
}

model SessionTicketServiceOrder {
  id                   String               @id @default(uuid())
  service_order_id     String               @unique
  session_ticket_id    String
  service_order        ServiceOrder         @relation(fields: [service_order_id], references: [id])
  session_ticket       SessionTicket        @relation(fields: [session_ticket_id], references: [id])
  session_subscription SessionSubscription?

  @@map("session_ticket_service_orders")
}

model PaymentMethod {
  id           String            @id @default(uuid())
  payment_form PaymentMethodType
  name         String
  informations String?
  status       Boolean           @default(false)
  created_at   DateTime          @default(now())
  updated_at   DateTime          @default(now()) @updatedAt
  transactions Transaction[]
  installments Installments[]

  @@map("payment_methods")
}

model Installments {
  id                String        @id @default(uuid())
  title             String
  fee               Float
  number            Int           @default(1)
  payment_method_id String
  status            Boolean       @default(false)
  payment_method    PaymentMethod @relation(fields: [payment_method_id], references: [id])
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now()) @updatedAt

  @@map("installments")
}

model Subscription {
  id                      String             @id @default(uuid())
  user_id                 String
  event_id                String
  code_ref                String
  ticket_service_order_id String             @unique
  status                  SubscriptionStatus
  created_at              DateTime           @default(now())
  updated_at              DateTime           @default(now()) @updatedAt
  user                    User               @relation(fields: [user_id], references: [uid])
  event                   Event              @relation(fields: [event_id], references: [id])
  ticket_service_order    TicketServiceOrder @relation(fields: [ticket_service_order_id], references: [id])

  @@map("subscriptions")
}

model SessionSubscription {
  id                              String                    @id @default(uuid())
  user_id                         String
  session_id                      String
  code_ref                        String
  session_ticket_service_order_id String                    @unique
  status                          SubscriptionStatus
  created_at                      DateTime                  @default(now())
  updated_at                      DateTime                  @default(now()) @updatedAt
  user                            User                      @relation(fields: [user_id], references: [uid])
  session                         Session                   @relation(fields: [session_id], references: [id])
  session_ticket_service_order    SessionTicketServiceOrder @relation(fields: [session_ticket_service_order_id], references: [id])

  @@map("session_subscriptions")
}

model Transaction {
  id                   String               @id @default(uuid())
  payment_method_id    String
  service_order_id     String
  transaction_id       String?
  processed_response   String?
  customer_email       String
  customer_name        String
  customer_phone       String
  customer_document    String
  billing_address      String?
  billing_number       String?
  billing_neighborhood String?
  billing_city         String?
  billing_state        String?
  billing_zipcode      String?
  operation            TransactionOperation
  status               TransactionStatus
  type                 TransactionType
  created_at           DateTime             @default(now())
  updated_at           DateTime             @default(now()) @updatedAt
  payment_method       PaymentMethod        @relation(fields: [payment_method_id], references: [id])
  service_order        ServiceOrder         @relation(fields: [service_order_id], references: [id])

  @@map("transactions")
}

model Log {
  id               String   @id @default(uuid())
  description      String?
  request_method   String   @db.Text
  request_url      String   @db.Text
  request_headers  String   @db.Text
  request_body     String   @db.Text
  response_status  Int
  response_headers String   @db.Text
  response_body    String?  @db.Text
  request_ip       String?
  user_id          String
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt
  user             User     @relation(fields: [user_id], references: [uid])

  @@map("logs")
}

enum EventVenueType {
  presential
  online
}

enum EventStatus {
  published // publicado
  started // iniciado
  finished // encerrado
}

enum ServiceOrderType {
  event
  session
}

enum SubscriptionStatus {
  pending // pendente
  processing // processando
  completed // completa
  refused // recusada
}

enum ServiceOrderStatus {
  open // aberta
  processing // processando
  settled // quitada
  closed // fechada
  canceled // cancelada
}

enum PaymentMethodType {
  credit // credito
  debit // debito
  check // cheque
  bank_slip // boleto
  cash // dinheiro
  deposit // deposito
  wallet // carteira
  transfer // trasnferencia
  pix
}

enum TransactionStatus {
  started // iniciada
  processing // processando
  pending // pendente
  approved // aprovada
  refused // recusada
  refunded // devolvida
  chargeback // estorno
  error // error
}

enum TransactionOperation {
  withdraw // saqui
  order // ordem servinço
}

enum TransactionType {
  input // entrada
  output // saida
}

enum RecipientDocumentType {
  cpf // entrada
  cnpj // saida
}

enum RecipientStatus {
  pending // pendente
  refused // recusada
  completed // completa
  canceled // cancelada
}

enum SessionDateType {
  start // início
  end // término
}

enum SessionDateStatus {
  started // iniciado
  finished // encerrado
}

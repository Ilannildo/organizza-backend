generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  uid                  String          @id @default(uuid())
  name                 String          @db.VarChar(150)
  email                String          @unique(map: "email")
  gender               String?         @db.VarChar(15)
  phone                String?         @db.VarChar(32)
  password             String
  photo_url            String?
  name_badge           String?         @db.VarChar(150)
  status               Boolean         @default(false)
  email_verificated_at DateTime?
  role_id              String
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  deleted_at           DateTime?
  role                 Role            @relation(fields: [role_id], references: [id])
  user_has_address     UserHasAddress?
  events               Event[]
  email_token          EmailToken?

  @@map("users")
}

model Role {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(150)
  register_user  Boolean  @default(false)
  delete_user    Boolean  @default(false)
  edit_user      Boolean  @default(false)
  view_user      Boolean  @default(false)
  register_event Boolean  @default(false)
  delete_event   Boolean  @default(false)
  edit_event     Boolean  @default(false)
  view_event     Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  User           User[]

  @@map("roles")
}

model EmailToken {
  id            String    @id @default(uuid())
  expires_in    Int
  user_id       String    @unique
  email_sent    Boolean   @default(false)
  email_sent_at DateTime?
  user          User      @relation(fields: [user_id], references: [uid])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("email_token")
}

model State {
  id         String   @id @default(uuid())
  name       String   @db.VarChar(150)
  uf         String   @db.VarChar(2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cities     City[]

  @@map("states")
}

model City {
  id                 String    @id @default(uuid())
  name               String    @db.VarChar(150)
  zipcode            String    @db.VarChar(8)
  state_id           String
  is_available_event Boolean   @default(true)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  state              State     @relation(fields: [state_id], references: [id])
  addresses          Address[]

  @@map("cities")
}

model Address {
  id                String           @id @default(uuid())
  street            String           @db.VarChar(150)
  reference         String?          @db.VarChar(150)
  neighborhood      String?          @db.VarChar(150)
  city_id           String
  latitude          String?
  longitude         String?
  address_link      String?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  city              City             @relation(fields: [city_id], references: [id])
  user_has_address  UserHasAddress?
  event_has_address EventHasAddress?

  @@map("addresses")
}

model UserHasAddress {
  user_id    String  @unique
  address_id String  @unique
  address    Address @relation(fields: [address_id], references: [id])
  user       User    @relation(fields: [user_id], references: [uid])

  @@id([user_id, address_id])
  @@map("users_has_addresses")
}

model Event {
  id                   String           @id @default(uuid())
  title                String
  slug                 String
  created_by_user_id   String
  event_type_id        String
  credit_hour          Int?
  main_subject_id      String
  short_description    String
  summary              String?
  venue_type           EventVenueType
  is_private           Boolean
  start_date           DateTime
  start_time           DateTime
  end_date             DateTime
  end_time             DateTime
  logo_url             String?
  facebook_url         String?
  instagram_url        String?
  twitter_url          String?
  event_responsible_id String
  status               EventStatus
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  deleted_at           DateTime?
  created_by_user      User             @relation(fields: [created_by_user_id], references: [uid])
  event_responsible    EventResponsible @relation(fields: [event_responsible_id], references: [id])
  main_subject         MainSubject      @relation(fields: [main_subject_id], references: [id])
  event_type           EventType        @relation(fields: [event_type_id], references: [id])
  event_cover          EventCover?
  event_has_address    EventHasAddress?
  sessions             Session[]

  @@map("events")
}

model EventHasAddress {
  event_id   String  @unique
  address_id String  @unique
  address    Address @relation(fields: [address_id], references: [id])
  event      Event   @relation(fields: [event_id], references: [id])

  @@id([event_id, address_id])
  @@map("events_has_addresses")
}

model EventCover {
  id       String  @id @default(uuid())
  event_id String  @unique
  name     String
  size     Int
  key      String
  url      String?
  event    Event   @relation(fields: [event_id], references: [id])

  @@map("event_covers")
}

model SessionCover {
  id         String  @id @default(uuid())
  session_id String  @unique
  name       String
  size       Int
  key        String
  url        String?
  session    Session @relation(fields: [session_id], references: [id])

  @@map("session_covers")
}

model EventResponsible {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  description String?
  phone       String?
  logo_url    String?
  document    String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  events      Event[]

  @@map("event_responsibles")
}

model MainSubject {
  id         String    @id @default(uuid())
  title      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  events     Event[]

  @@map("main_subjects")
}

model EventType {
  id         String    @id @default(uuid())
  title      String
  icon_name  String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  events     Event[]

  @@map("event_types")
}

model Session {
  id               String        @id @default(uuid())
  title            String
  credit_hour      Int?
  summary          String?
  responsible_name String
  event_id         String
  session_type_id  String
  place            String
  start_date       DateTime
  start_time       DateTime
  end_date         DateTime
  end_time         DateTime
  status           EventStatus
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  deleted_at       DateTime?
  event            Event         @relation(fields: [event_id], references: [id])
  session_cover    SessionCover?
  session_type     SessionType   @relation(fields: [session_type_id], references: [id])

  @@map("sessions")
}

model SessionType {
  id         String    @id @default(uuid())
  title      String
  icon_name  String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  sessions   Session[]

  @@map("session_types")
}

enum EventVenueType {
  presential
  online
}

enum EventStatus {
  published
  started
  finished
}
